pragma solidity ^0.5.0;

interface IFizzBuzz {
  function fizzBuzz(uint256 num) external pure returns (string memory);
}

contract uintToStr {
    
    function uint2str(uint _i) internal pure returns (string memory) {
        if (_i == 0) {
            return "0";
        }
        uint j = _i;
        uint len;
        while (j != 0) {
            len++;
            j /= 10;
        }
        bytes memory bstr = new bytes(len);
        uint k = len - 1;
        while (_i != 0) {
            bstr[k--] = byte(uint8(48 + _i % 10));
            _i /= 10;
        }
        return string(bstr);
    }
}

contract FizzBuzz is IFizzBuzz, uintToStr {
    
    function fizzBuzz(uint256 num) external pure returns (string memory) {
        if(num % 15 == 0) {
            return "fizzBuzz";
        } else if(num % 5 == 0) {
            return "Buzz";
        } else if (num % 3 ==0) {
            return "Fizz";
        } return uint2str(num);
    }
}
